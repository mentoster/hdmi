section .data
    ; Объявляем массив. Первый элемент - это размер массива.
    array   db 6, 34, 56, 12, 89, 54, 23  ; Здесь массив из 7 элементов (6 элементов + размер)
    max     dd 0                          ; Переменная для хранения максимального значения

section .text
    global main

main:
    mov ebp, esp

    ; Инициализируем указатель на массив и загружаем размер массива в ecx
    mov edx, array      
    movzx ecx, byte [edx]  ; Размер массива в ecx
    ;Команда MOVZX позволяет скопировать данные из источника (второй операнд)
    ;меньшего размера в приемник (первый операнд) большего размера
    ;результат будет дополнен нулевыми битами
    inc edx                ; Переходим к следующему элементу

    ; Инициализируем eax первым элементом массива как предполагаемый максимум
    movzx eax, byte [edx]  ; Загружаем первое значение в eax
    mov [max], eax         ; Инициализируем max первым значением
    inc edx                ; Переходим к следующему элементу

find_maximum:
    ; Сравниваем текущий элемент с максимальным значением
    movzx ebx, byte [edx]
    cmp [max], ebx
    jnl skip        ; Если текущий элемент не больше максимума, переходим к следующему

    ; Обновляем максимум
    mov [max], ebx 

skip:
    inc edx         ; Переходим к следующему элементу
    loop find_maximum ; Уменьшаем ecx и продолжаем цикл поиска максимума

end_program:
    ; Значение переменной max теперь содержит максимальное значение массива.
    ; Возвращаем это значение и завершаем программу
    mov eax, [max]
    ret
